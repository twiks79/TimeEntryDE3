File: ./pages/api/auth/[...nextauth].js
// Import providers
import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";

// Options
const options = {
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text", placeholder: "jsmith" },
        password: { label: "Password", type: "password" }
      },
      async authorize(credentials) {
        const user = { id: "1", name: "ali", password: "ali123" };
        console.log('credentials', credentials);
        if (credentials?.username == user.name && credentials.password == user.password) {
          console.log('user login successful', user);
          return user;
        } else {
          return null;

        }
      }
    })
  ], secret: process.env.SECRET,
  pages: {
    signIn: "/"
  },
  session: {
    strategy: "jwt",
  },
  jwt: {
    secret: process.env.NEXTAUTH_SECRET,
  },
}

export default NextAuth(options);




/* import NextAuth from 'next-auth';
import CredentialsProvider from 'next-auth/providers/credentials';


export default NextAuth({
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        username: { label: "Username", type: "text", placeholder: "jsmith" },
        password: { label: "Password", type: "password" }
      },

      async authorize(credentials, req) {
        // You need to provide your own logic here for user validation
        console.log('credentials', credentials);
        // console.log('req', req);

        const user = { id: 1, name: 'J Smith' };
        if (
          credentials &&
          credentials.username === 'jsmith' &&
          credentials.password === 'password123'
        ) {
          console.log('user login successful', user);
          return user;
        } else {
          return null;
        }
      },
    }),
  ],

  secret: process.env.SECRET,

  callbacks: {
    async redirect({ url, baseUrl }) {
      // Allows relative callback URLs
      if (url.startsWith("/")) return `${baseUrl}${url}`
      // Allows callback URLs on the same origin
      else if (new URL(url).origin === baseUrl) return url
      return baseUrl
    },

    async session({ session, token }) {
      // log timestamp
      console.log('session', session);
      // console.log('timestamp', new Date().toISOString());

      // session.user.id = token.sub;
      // return session as json
      return session;
    },


    async jwt({ token, user }) {
      console.log('jwt', token);
      if (user) {
        token.sub = user.id;
      }
      return token;
    }
  },
  
  pages: {
    signIn: '/signin',
  }

}); */File: ./pages/api/hello.js
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: 'John Doe' })
}
File: ./pages/_document.js
import { Html, Head, Main, NextScript } from 'next/document'

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body>
        <Main />
        <NextScript />
      </body>
    </Html>
  )
}
File: ./pages/signin.js
// pages/signin.js
'use client';

import { useState } from 'react';
import { signIn } from 'next-auth/react';

export default function SignIn() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = async (event) => {
    event.preventDefault();
    console.log('handleSubmit');
    console.log('username', username, 'password', password);

    // Attempt to sign in
    const result = await signIn('credentials', {
      redirect: false, // Prevent NextAuth from redirecting automatically
      username,
      password,
      callbackUrl: `${window.location.origin}` // redirect to this URL after sign in
    });

    console.log('result.url', result.url);
    console.log('callbackUrl', `${window.location.origin}`);

    // Check if result.error exists and handle accordingly
    if (result.error) {
      console.error('Sign-in error:', result.error);
      // Handle error here, such as displaying a notification to the user
    } else {
      // Redirect the user to the callbackUrl if sign in was successful
      console.log('Sign-in successful', result.url);
      window.location.href = result.url;
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="username">Username</label>
        <input
          type="text"
          id="username"
          name="username"
          value={username}
          onChange={(e) => setUsername(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="password">Password</label>
        <input
          type="password"
          id="password"
          name="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
      </div>
      <button type="submit">Sign in</button>
    </form>
  );
}File: ./pages/_app.js
import '@/styles/globals.css'

import { SessionProvider } from 'next-auth/react'

export default function App({ Component, pageProps: { session, ...pageProps }}) {
  return (
    <SessionProvider session={session}>
      <Component {...pageProps} />
    </SessionProvider>
  )
}File: ./pages/index.js
'use client'

import { getSession, signIn, signOut } from 'next-auth/react';
import { useSession, useRouter } from 'next-auth/react';

export default function Home({ session }) {
  const router = useRouter();

  if(!session) {
    console.log('before signIn');
    signIn();
    console.log('after signIn');
    return <p>Loading...</p>;
  }

  return (
    <main>
      <p>Welcome {session.user.name}!</p>

      <button onClick={() => signOut()}>
        Sign out  
      </button>
    </main>
  );
}

export async function getServerSideProps(context) {
  const session = await getSession(context);

  if(!session) {
    return {
      redirect: {
        destination: '/signin',
        permanent: false
      }
    }
  }

  return {
    props: {
      session 
    }
  }

}File: ./next.config.js

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    domains: ['source.unsplash.com'],
    domains: [],
  },
  // ... any other existing configuration
  env: {
      CLIENTID: process.env.CLIENTID,
      OKTASECRET: process.env.OKTASECRECRET,
      YOUROKTADOMAIN: process.env.YOUROKTADOMAIN,
    },
}

module.exports = nextConfig;
File: ./postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
File: ./tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
}
