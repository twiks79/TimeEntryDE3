File: ./components/ThemeRegistry/ThemeRegistry.js
'use client';
import * as React from 'react';
import { ThemeProvider } from '@mui/material/styles';
import CssBaseline from '@mui/material/CssBaseline';
import NextAppDirEmotionCacheProvider from './EmotionCache';
import theme from './theme';

export default function ThemeRegistry({ children }) {
  return (
    <NextAppDirEmotionCacheProvider options={{ key: 'mui' }}>
      <ThemeProvider theme={theme}>
        {/* CssBaseline kickstart an elegant, consistent, and simple baseline to build upon. */}
        <CssBaseline />
        {children}
      </ThemeProvider>
    </NextAppDirEmotionCacheProvider>
  );
}File: ./components/ThemeRegistry/EmotionCache.js
'use client';
import * as React from 'react';
import createCache from '@emotion/cache';
import { useServerInsertedHTML } from 'next/navigation';
import { CacheProvider as DefaultCacheProvider } from '@emotion/react';

// Adapted from https://github.com/garronej/tss-react/blob/main/src/next/appDir.tsx
export default function NextAppDirEmotionCacheProvider(props) {
  const { options, CacheProvider = DefaultCacheProvider, children } = props;

  const [registry] = React.useState(() => {
    const cache = createCache(options);
    cache.compat = true;
    const prevInsert = cache.insert;
    let inserted = [];
    cache.insert = (...args) => {
      const [selector, serialized] = args;
      if (cache.inserted[serialized.name] === undefined) {
        inserted.push({
          name: serialized.name,
          isGlobal: !selector,
        });
      }
      return prevInsert(...args);
    };
    const flush = () => {
      const prevInserted = inserted;
      inserted = [];
      return prevInserted;
    };
    return { cache, flush };
  });

  useServerInsertedHTML(() => {
    const inserted = registry.flush();
    if (inserted.length === 0) {
      return null;
    }
    let styles = '';
    let dataEmotionAttribute = registry.cache.key;

    const globals = [];

    inserted.forEach(({ name, isGlobal }) => {
      const style = registry.cache.inserted[name];

      if (typeof style !== 'boolean') {
        if (isGlobal) {
          globals.push({ name, style });
        } else {
          styles += style;
          dataEmotionAttribute += ` ${name}`;
        }
      }
    });

    return (
      <React.Fragment>
        {globals.map(({ name, style }) => (
          <style
            key={name}
            data-emotion={`${registry.cache.key}-global ${name}`}
            // eslint-disable-next-line react/no-danger
            dangerouslySetInnerHTML={{ __html: style }}
          />
        ))}
        {styles && (
          <style
            data-emotion={dataEmotionAttribute}
            // eslint-disable-next-line react/no-danger
            dangerouslySetInnerHTML={{ __html: styles }}
          />
        )}
      </React.Fragment>
    );
  });

  return <CacheProvider value={registry.cache}>{children}</CacheProvider>;
}File: ./components/ThemeRegistry/theme.js
import { Roboto } from 'next/font/google';
import { createTheme } from '@mui/material/styles';

const roboto = Roboto({
  weight: ['300', '400', '500', '700'],
  subsets: ['latin'],
  display: 'swap',
});

const theme = createTheme({
  palette: {
    mode: 'light',
  },
  typography: {
    fontFamily: roboto.style.fontFamily,
  },
  components: {
    MuiAlert: {
      styleOverrides: {
        root: ({ ownerState }) => ({
          ...(ownerState.severity === 'info' && {
            backgroundColor: '#60a5fa',
          }),
        }),
      },
    },
  },
});

export default theme;File: ./components/ClientAuth.js
// client-auth.js
import { signIn, signOut, useSession } from "next-auth/react";

export default function ClientSideAuth() {
    const { data: session, status } = useSession();

    if (status === 'loading') {
        return <div>Loading...</div>;
    }

    if (session) {
        return (
            <div>
                You have logged in <button onClick={() => signOut()}>Sign out</button>
            </div>
        );
    }

    return (
        <div>
            Not Logged In <button onClick={() => signIn()}>Sign in</button>
        </div>
    );
}
File: ./components/MediaCard.js
import * as React from 'react';
import Image from 'next/image';
import Card from '@mui/material/Card';
import CardActions from '@mui/material/CardActions';
import CardContent from '@mui/material/CardContent';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';

export default function MediaCard({ heading, text }) {
  return (
    <Card>
      <Image
        alt="Random image"
        src="https://source.unsplash.com/random"
        width={640}
        height={480}
        style={{
          maxWidth: '100%',
          height: '200px',
          objectFit: 'cover',
        }}
      />
      <CardContent>
        <Typography gutterBottom variant="h5" component="div">
          {heading}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {text}
        </Typography>
      </CardContent>
      <CardActions>
        <Button size="small">Share</Button>
        <Button size="small">Learn More</Button>
      </CardActions>
    </Card>
  );
}File: ./app/layout.js
'use client'

import * as React from 'react';
import Link from 'next/link';
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Drawer from '@mui/material/Drawer';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Divider from '@mui/material/Divider';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import ListItemButton from '@mui/material/ListItemButton';
import ListItemIcon from '@mui/material/ListItemIcon';
import ListItemText from '@mui/material/ListItemText';
import DashboardIcon from '@mui/icons-material/Dashboard';
import HomeIcon from '@mui/icons-material/Home';
import StarIcon from '@mui/icons-material/Star';
import ChecklistIcon from '@mui/icons-material/Checklist';
import SettingsIcon from '@mui/icons-material/Settings';
import SupportIcon from '@mui/icons-material/Support';
import LogoutIcon from '@mui/icons-material/Logout';
import ThemeRegistry from '@/components/ThemeRegistry/ThemeRegistry';
import { useState } from 'react';


{/*
export const metadata = {
  title: 'Next.js App Router + Material UI v5',
  description: 'Next.js App Router + Material UI v5',
};
*/}

const DRAWER_WIDTH = 240;

const LINKS = [
  { text: 'Home', href: '/', icon: HomeIcon },
  { text: 'Starred', href: '/starred', icon: StarIcon },
  { text: 'Tasks', href: '/tasks', icon: ChecklistIcon },
];

const PLACEHOLDER_LINKS = [
  { text: 'Settings', icon: SettingsIcon },
  { text: 'Support', icon: SupportIcon },
  { text: 'Logout', icon: LogoutIcon },
];

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body>
        <ThemeRegistry>
          <AppBar position="fixed" sx={{ zIndex: 2000 }}>
            <Toolbar sx={{ backgroundColor: 'background.paper' }}>
              <DashboardIcon sx={{ color: '#444', mr: 2, transform: 'translateY(-2px)' }} />
              <Typography variant="h6" noWrap component="div" color="black">
                Next.js App Router
              </Typography>
            </Toolbar>
          </AppBar>
          <Drawer
            sx={{
              width: DRAWER_WIDTH,
              flexShrink: 0,
              '& .MuiDrawer-paper': {
                width: DRAWER_WIDTH,
                boxSizing: 'border-box',
                top: ['48px', '56px', '64px'],
                height: 'auto',
                bottom: 0,
              },
            }}
            variant="permanent"
            anchor="left"
          >
            <Divider />
            <List>
              {LINKS.map(({ text, href, icon: Icon }) => (
                <ListItem key={href} disablePadding>
                  <ListItemButton component={Link} href={href}>
                    <ListItemIcon>
                      <Icon />
                    </ListItemIcon>
                    <ListItemText primary={text} />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
            <Divider sx={{ mt: 'auto' }} />
            <List>
              {PLACEHOLDER_LINKS.map(({ text, icon: Icon }) => (
                <ListItem key={text} disablePadding>
                  <ListItemButton>
                    <ListItemIcon>
                      <Icon />
                    </ListItemIcon>
                    <ListItemText primary={text} />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          </Drawer>
          <Box
            component="main"
            sx={{
              flexGrow: 1,
              bgcolor: 'background.default',
              ml: `${DRAWER_WIDTH}px`,
              mt: ['48px', '56px', '64px'],
              p: 3,
            }}
          >
            {children}
          </Box>
          
        </ThemeRegistry>
        
      </body>
    </html>
  );
}File: ./app/tasks/pages.js
import * as React from 'react';
import Container from '@mui/material/Container';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { useSession, signIn, signOut } from 'next-auth/react';


export default function TasksPage() {

  const { data: session } = useSession();

  if (session) {
    return (
      <>
        Signed in as {session.user.email}
        <button onClick={() => signOut()}>Sign out</button>


        <Container>
          <Box
            sx={{
              display: 'flex',
              flexDirection: 'column',
              justifyContent: 'center',
              alignItems: 'center',
            }}
          >
            <Typography variant="body1" gutterBottom>
              Tasks Page
            </Typography>
          </Box>
        </Container>
      </>
    );
  }
  return (
    <>
      Not signed in
      <button onClick={() => signIn()}>Sign in</button>
    </>
  );
}File: ./app/login/pages.js
File: ./app/starred/pages.js
import * as React from 'react';
import Container from '@mui/material/Container';
import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';

export default function StarredPage() {
  return (
    <Container>
      <Box
        sx={{
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
        }}
      >
        <Typography variant="body1" gutterBottom>
          Starred Page
        </Typography>
      </Box>
    </Container>
  );
}File: ./app/page.js
'use client'
import * as React from 'react';
import Box from '@mui/material/Box';
import Grid from '@mui/material/Unstable_Grid2';
import Drawer from '@mui/material/Drawer';
import Typography from '@mui/material/Typography';
import List from '@mui/material/List';
import ListItem from '@mui/material/ListItem';
import Alert from '@mui/material/Alert';
import AlertTitle from '@mui/material/AlertTitle';
import MediaCard from '@/components/MediaCard';
import ClientSideAuth from '@/components/ClientAuth';
import { useSession, signIn, signOut } from 'next-auth/react';
import { useState } from 'react';
import Button from '@mui/material/Button';
import log from 'loglevel';
import { SessionProvider } from 'next-auth/react'
import { Session } from 'next-auth'

export default function HomePage() {
  log.setLevel('debug');
  // log the same using console.log
  console.log('Client: This is a client log message');
  console.log(process.env.OKTA_CLIENT_ID);
  console.log(process.env.OKTA_CLIENT_SECRET);
  console.log(process.env.OKTA_DOMAIN);

  return (
    <>
      <SessionProvider session={session}>
        <Box sx={{ display: 'flex' }}>
          <div>
            <Alert severity="info" sx={{ mt: 2, mb: 5 }}>
              <AlertTitle>Hello 👋</AlertTitle>
              This app uses the Next.js App Router and Material UI v5.
            </Alert>
            <Grid container rowSpacing={3} columnSpacing={3}>
              <Grid xs={6}>
                <MediaCard
                  heading="CMYK"
                  text="The CMYK color model (also known as process color, or four color) is a subtractive color model, based on the CMY color model, used in color printing, and is also used to describe the printing process itself."
                />
              </Grid>
              <Grid xs={6}>
                <MediaCard
                  heading="HSL and HSV"
                  text="HSL (for hue, saturation, lightness) and HSV (for hue, saturation, value; also known as HSB, for hue, saturation, brightness) are alternative representations of the RGB color model, designed in the 1970s by computer graphics researchers."
                />
              </Grid>
              <Grid xs={6}>
                <MediaCard
                  heading="RGB"
                  text="An RGB color space is any additive color space based on the RGB color model. RGB color spaces are commonly found describing the input signal to display devices such as television screens and computer monitors."
                />
              </Grid>
              <Grid xs={6}>
                <MediaCard
                  heading="CIELAB"
                  text="The CIELAB color space, also referred to as L*a*b*, was intended as a perceptually uniform space, where a given numerical change corresponds to a similar perceived change in color."
                />
              </Grid>
            </Grid>
          </div>
          <Drawer
            sx={{
              width: 320,
              flexShrink: 0,
              '& .MuiDrawer-paper': {
                width: 320,
                boxSizing: 'border-box',
                top: ['48px', '56px', '64px'],
                height: 'auto',
                bottom: 0,
              },
            }}
            variant="permanent"
            anchor="right"
          >
            <List sx={{ px: 2 }}>
              <ListItem disablePadding>
                <Typography variant="overline" sx={{ fontWeight: 500 }}>
                  On this page
                  
                  {/* <Button onClick={() => signIn('okta')}>Sign in</Button>
                  */}
                  <ClientSideAuth />
                </Typography>
              </ListItem>
            </List>
          </Drawer>
        </Box>
      </SessionProvider>
    </>
  );
}File: ./pages/api/auth/[...nextauth].js
// app/api/auth/[...nextauth].js
import NextAuth from 'next-auth';
import OktaProvider from 'next-auth/providers/okta';

console.log('OKTA_CLIENT_ID:', process.env.OKTA_CLIENT_ID);
console.log('OKTA_CLIENT_SECRET:', process.env.OKTA_CLIENT_SECRET);
console.log('OKTA_DOMAIN:', process.env.OKTA_DOMAIN);

export default NextAuth({
  providers: [
    OktaProvider({
      clientId: process.env.OKTA_CLIENT_ID,
      clientSecret: process.env.OKTA_CLIENT_SECRET,
      issuer: `https://${process.env.OKTA_DOMAIN}/oauth2/default`,
      authorizationParams: {
        response_type: 'code',
        code_challenge_method: 'S256',
      },
    }),
    // ...other providers if needed
  ],
  secret: process.env.SECRET,
  
  // Additional NextAuth.js configurations...

  callbacks: {
    /**
     * This function is called whenever a user signs in.
     * You can add custom logic here, such as logging user sign-ins.
     * @param {object} user - User object
     * @param {object} account - Account object
     * @param {object} profile - Profile object
     * @returns {Promise<boolean>}
     */
    async signIn(user, account, profile) {
      // Log user sign-in
      console.log(`User signed in: ${user.email}`);

      // You can add custom logic here if needed

      return true; // Return true to allow sign-in
    },

    /**
     * This function is called whenever a session is created.
     * You can add custom logic here, such as logging session creation.
     * @param {object} session - Session object
     * @param {object} user - User object
     * @returns {Promise<object>}
     */
    async session(session, user) {
      // Log session creation
      console.log(`Session created for user: ${user.email}`);

      // You can add custom logic here if needed

      return session;
    },

    /**
     * This function is called whenever a session is destroyed.
     * You can add custom logic here, such as logging session destruction.
     * @param {object} session - Session object
     * @returns {Promise<object>}
     */
    async session(session) {
      // Log session destruction
      console.log(`Session destroyed for user: ${session.user.email}`);

      // You can add custom logic here if needed

      return session;
    },
  },
});
File: ./next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
    images: {
      domains: ['source.unsplash.com'],
    },
    // ... any other existing configuration
    env: {
        CLIENTID: process.env.CLIENTID,
        OKTASECRET: process.env.OKTASECRECRET,
        YOUROKTADOMAIN: process.env.YOUROKTADOMAIN,
      },
  }
  
  module.exports = nextConfig;
  File: ./postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
File: ./tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      backgroundImage: {
        'gradient-radial': 'radial-gradient(var(--tw-gradient-stops))',
        'gradient-conic':
          'conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))',
      },
    },
  },
  plugins: [],
}
